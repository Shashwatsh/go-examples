// Code generated by protoc-gen-go.
// source: logs.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	logs.proto

It has these top-level messages:
	ContainerLogsRequest
	ContanerLogsResponse
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ContainerLogsRequest struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Type      int32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Filter    string `protobuf:"bytes,3,opt,name=filter" json:"filter,omitempty"`
}

func (m *ContainerLogsRequest) Reset()                    { *m = ContainerLogsRequest{} }
func (m *ContainerLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerLogsRequest) ProtoMessage()               {}
func (*ContainerLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ContanerLogsResponse struct {
	Log    string `protobuf:"bytes,1,opt,name=log" json:"log,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Stdout string `protobuf:"bytes,3,opt,name=stdout" json:"stdout,omitempty"`
}

func (m *ContanerLogsResponse) Reset()                    { *m = ContanerLogsResponse{} }
func (m *ContanerLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*ContanerLogsResponse) ProtoMessage()               {}
func (*ContanerLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*ContainerLogsRequest)(nil), "main.ContainerLogsRequest")
	proto.RegisterType((*ContanerLogsResponse)(nil), "main.ContanerLogsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for RemoteRuntime service

type RemoteRuntimeClient interface {
	ContainerLogs(ctx context.Context, in *ContainerLogsRequest, opts ...grpc.CallOption) (RemoteRuntime_ContainerLogsClient, error)
}

type remoteRuntimeClient struct {
	cc *grpc.ClientConn
}

func NewRemoteRuntimeClient(cc *grpc.ClientConn) RemoteRuntimeClient {
	return &remoteRuntimeClient{cc}
}

func (c *remoteRuntimeClient) ContainerLogs(ctx context.Context, in *ContainerLogsRequest, opts ...grpc.CallOption) (RemoteRuntime_ContainerLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RemoteRuntime_serviceDesc.Streams[0], c.cc, "/main.RemoteRuntime/ContainerLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteRuntimeContainerLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoteRuntime_ContainerLogsClient interface {
	Recv() (*ContanerLogsResponse, error)
	grpc.ClientStream
}

type remoteRuntimeContainerLogsClient struct {
	grpc.ClientStream
}

func (x *remoteRuntimeContainerLogsClient) Recv() (*ContanerLogsResponse, error) {
	m := new(ContanerLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RemoteRuntime service

type RemoteRuntimeServer interface {
	ContainerLogs(*ContainerLogsRequest, RemoteRuntime_ContainerLogsServer) error
}

func RegisterRemoteRuntimeServer(s *grpc.Server, srv RemoteRuntimeServer) {
	s.RegisterService(&_RemoteRuntime_serviceDesc, srv)
}

func _RemoteRuntime_ContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContainerLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteRuntimeServer).ContainerLogs(m, &remoteRuntimeContainerLogsServer{stream})
}

type RemoteRuntime_ContainerLogsServer interface {
	Send(*ContanerLogsResponse) error
	grpc.ServerStream
}

type remoteRuntimeContainerLogsServer struct {
	grpc.ServerStream
}

func (x *remoteRuntimeContainerLogsServer) Send(m *ContanerLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _RemoteRuntime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.RemoteRuntime",
	HandlerType: (*RemoteRuntimeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ContainerLogs",
			Handler:       _RemoteRuntime_ContainerLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("logs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xc9, 0x4f, 0x2f,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53, 0x4a, 0xe0, 0x12,
	0x71, 0xce, 0xcf, 0x2b, 0x01, 0x32, 0x53, 0x8b, 0x7c, 0x80, 0x92, 0x41, 0xa9, 0x85, 0xa5, 0xa9,
	0xc5, 0x25, 0x42, 0x32, 0x5c, 0x9c, 0xc9, 0x30, 0x71, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20,
	0x84, 0x80, 0x90, 0x10, 0x17, 0x4b, 0x49, 0x65, 0x41, 0xaa, 0x04, 0x13, 0x50, 0x82, 0x35, 0x08,
	0xcc, 0x16, 0x12, 0xe3, 0x62, 0x4b, 0xcb, 0xcc, 0x29, 0x01, 0x2a, 0x67, 0x06, 0x2b, 0x87, 0xf2,
	0x94, 0xc2, 0xa0, 0x36, 0xc0, 0x2d, 0x28, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x12, 0xe0, 0x62,
	0x06, 0xba, 0x06, 0x6a, 0x36, 0x88, 0x29, 0x24, 0xc2, 0xc5, 0x9a, 0x5a, 0x54, 0x94, 0x5f, 0x04,
	0x36, 0x96, 0x33, 0x08, 0xc2, 0x01, 0x99, 0x5b, 0x5c, 0x92, 0x92, 0x5f, 0x5a, 0x02, 0x33, 0x17,
	0xc2, 0x33, 0x8a, 0xe1, 0xe2, 0x0d, 0x4a, 0xcd, 0xcd, 0x2f, 0x49, 0x0d, 0x2a, 0xcd, 0x2b, 0xc9,
	0xcc, 0x4d, 0x15, 0xf2, 0xe6, 0xe2, 0x45, 0xf1, 0x8a, 0x90, 0x94, 0x1e, 0xc8, 0x8b, 0x7a, 0xd8,
	0xfc, 0x27, 0x85, 0x2c, 0x87, 0xe6, 0x32, 0x25, 0x06, 0x03, 0xc6, 0x24, 0x36, 0x70, 0x20, 0x19,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xce, 0xba, 0xf7, 0x32, 0x01, 0x00, 0x00,
}
